{
  "api/AdaSoftLibrary.AdaSoft.Infrastructure.Persistence.AppXmlContext.html": {
    "href": "api/AdaSoftLibrary.AdaSoft.Infrastructure.Persistence.AppXmlContext.html",
    "title": "Class AppXmlContext | AdaSoftLibrary",
    "keywords": "Class AppXmlContext Namespace AdaSoftLibrary.AdaSoft.Infrastructure.Persistence Assembly AdaSoftLibrary.Infrastructure.dll XML dátový kontext public class AppXmlContext : IAppDataContext Inheritance object AppXmlContext Implements IAppDataContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppXmlContext(IOptions<ApplicationOptions>) public AppXmlContext(IOptions<ApplicationOptions> options) Parameters options IOptions<ApplicationOptions> Properties BookList Zoznam kníh public List<Book> BookList { get; } Property Value List<Book> Library Data knižnice public Library Library { get; init; } Property Value Library XmlFilePath public string XmlFilePath { get; } Property Value string Methods SaveChanges() Uloží všetky zmeny v danom kontexte do súboru public int SaveChanges() Returns int SaveChangesAsync(CancellationToken) Uloží asynchrónne všetky zmeny v danom kontexte do databázy public Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/AdaSoftLibrary.AdaSoft.Infrastructure.Persistence.html": {
    "href": "api/AdaSoftLibrary.AdaSoft.Infrastructure.Persistence.html",
    "title": "Namespace AdaSoftLibrary.AdaSoft.Infrastructure.Persistence | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.AdaSoft.Infrastructure.Persistence Classes AppXmlContext XML dátový kontext"
  },
  "api/AdaSoftLibrary.Api.Contracts.CreateBookRequest.html": {
    "href": "api/AdaSoftLibrary.Api.Contracts.CreateBookRequest.html",
    "title": "Class CreateBookRequest | AdaSoftLibrary",
    "keywords": "Class CreateBookRequest Namespace AdaSoftLibrary.Api.Contracts Assembly AdaSoftLibrary.Api.dll Zaevidovanie novej knihy public class CreateBookRequest Inheritance object CreateBookRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string Description public string? Description { get; set; } Property Value string Name public string Name { get; set; } Property Value string Year public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Api.Contracts.GetBooksRequest.html": {
    "href": "api/AdaSoftLibrary.Api.Contracts.GetBooksRequest.html",
    "title": "Class GetBooksRequest | AdaSoftLibrary",
    "keywords": "Class GetBooksRequest Namespace AdaSoftLibrary.Api.Contracts Assembly AdaSoftLibrary.Api.dll Dotaz na zoznam kníh public class GetBooksRequest Inheritance object GetBooksRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BookFilter Filter pre zoznam kníh BookFilterEnum public BookFilterEnum BookFilter { get; set; } Property Value BookFilterEnum SearchTerm Časť názvu knihy alebo mena autora public string? SearchTerm { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Api.Contracts.UpdateBookRequest.html": {
    "href": "api/AdaSoftLibrary.Api.Contracts.UpdateBookRequest.html",
    "title": "Class UpdateBookRequest | AdaSoftLibrary",
    "keywords": "Class UpdateBookRequest Namespace AdaSoftLibrary.Api.Contracts Assembly AdaSoftLibrary.Api.dll Editácia údajov o knihe public class UpdateBookRequest Inheritance object UpdateBookRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string Description public string? Description { get; set; } Property Value string Name public string Name { get; set; } Property Value string Year public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Api.Contracts.html": {
    "href": "api/AdaSoftLibrary.Api.Contracts.html",
    "title": "Namespace AdaSoftLibrary.Api.Contracts | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Api.Contracts Classes CreateBookRequest Zaevidovanie novej knihy GetBooksRequest Dotaz na zoznam kníh UpdateBookRequest Editácia údajov o knihe"
  },
  "api/AdaSoftLibrary.Api.Contractsô.BorrowBookRequest.html": {
    "href": "api/AdaSoftLibrary.Api.Contractsô.BorrowBookRequest.html",
    "title": "Class BorrowBookRequest | AdaSoftLibrary",
    "keywords": "Class BorrowBookRequest Namespace AdaSoftLibrary.Api.Contractsô Assembly AdaSoftLibrary.Api.dll Vypožičanie knihy public class BorrowBookRequest Inheritance object BorrowBookRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties BookId public int BookId { get; set; } Property Value int FirstName public string FirstName { get; set; } Property Value string LastName public string LastName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Api.Contractsô.html": {
    "href": "api/AdaSoftLibrary.Api.Contractsô.html",
    "title": "Namespace AdaSoftLibrary.Api.Contractsô | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Api.Contractsô Classes BorrowBookRequest Vypožičanie knihy"
  },
  "api/AdaSoftLibrary.Api.Endpoints.BookEndpoint.html": {
    "href": "api/AdaSoftLibrary.Api.Endpoints.BookEndpoint.html",
    "title": "Class BookEndpoint | AdaSoftLibrary",
    "keywords": "Class BookEndpoint Namespace AdaSoftLibrary.Api.Endpoints Assembly AdaSoftLibrary.Api.dll public class BookEndpoint : ICarterModule Inheritance object BookEndpoint Implements ICarterModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRoutes(IEndpointRouteBuilder) public void AddRoutes(IEndpointRouteBuilder app) Parameters app IEndpointRouteBuilder"
  },
  "api/AdaSoftLibrary.Api.Endpoints.HomeEndpoint.html": {
    "href": "api/AdaSoftLibrary.Api.Endpoints.HomeEndpoint.html",
    "title": "Class HomeEndpoint | AdaSoftLibrary",
    "keywords": "Class HomeEndpoint Namespace AdaSoftLibrary.Api.Endpoints Assembly AdaSoftLibrary.Api.dll public class HomeEndpoint : ICarterModule Inheritance object HomeEndpoint Implements ICarterModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRoutes(IEndpointRouteBuilder) public void AddRoutes(IEndpointRouteBuilder app) Parameters app IEndpointRouteBuilder"
  },
  "api/AdaSoftLibrary.Api.Endpoints.html": {
    "href": "api/AdaSoftLibrary.Api.Endpoints.html",
    "title": "Namespace AdaSoftLibrary.Api.Endpoints | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Api.Endpoints Classes BookEndpoint HomeEndpoint"
  },
  "api/AdaSoftLibrary.Api.IAssemblyMarker.html": {
    "href": "api/AdaSoftLibrary.Api.IAssemblyMarker.html",
    "title": "Interface IAssemblyMarker | AdaSoftLibrary",
    "keywords": "Interface IAssemblyMarker Namespace AdaSoftLibrary.Api Assembly AdaSoftLibrary.Api.dll public interface IAssemblyMarker"
  },
  "api/AdaSoftLibrary.Api.html": {
    "href": "api/AdaSoftLibrary.Api.html",
    "title": "Namespace AdaSoftLibrary.Api | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Api Interfaces IAssemblyMarker"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.Command.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.Command.html",
    "title": "Class BorrowBook.Command | AdaSoftLibrary",
    "keywords": "Class BorrowBook.Command Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class BorrowBook.Command : IRequest<Unit>, IBaseRequest Inheritance object BorrowBook.Command Implements IRequest<Unit> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName public string FirstName { get; set; } Property Value string Id public int Id { get; set; } Property Value int LastName public string LastName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.CommandHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.CommandHandler.html",
    "title": "Class BorrowBook.CommandHandler | AdaSoftLibrary",
    "keywords": "Class BorrowBook.CommandHandler Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class BorrowBook.CommandHandler : IRequestHandler<BorrowBook.Command, Unit> Inheritance object BorrowBook.CommandHandler Implements IRequestHandler<BorrowBook.Command, Unit> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(IBookRepository, IMapper) public CommandHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Command, CancellationToken) Handles a request public Task<Unit> Handle(BorrowBook.Command command, CancellationToken cancellationToken) Parameters command BorrowBook.Command cancellationToken CancellationToken Cancellation token Returns Task<Unit> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.BorrowBook.html",
    "title": "Class BorrowBook | AdaSoftLibrary",
    "keywords": "Class BorrowBook Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll Vypožičanie knihy public class BorrowBook Inheritance object BorrowBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.Command.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.Command.html",
    "title": "Class CreateBook.Command | AdaSoftLibrary",
    "keywords": "Class CreateBook.Command Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class CreateBook.Command : IRequest<CreateBook.Response>, IBaseRequest Inheritance object CreateBook.Command Implements IRequest<CreateBook.Response> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string Description public string? Description { get; set; } Property Value string Name public string Name { get; set; } Property Value string Year public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.CommandHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.CommandHandler.html",
    "title": "Class CreateBook.CommandHandler | AdaSoftLibrary",
    "keywords": "Class CreateBook.CommandHandler Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class CreateBook.CommandHandler : IRequestHandler<CreateBook.Command, CreateBook.Response> Inheritance object CreateBook.CommandHandler Implements IRequestHandler<CreateBook.Command, CreateBook.Response> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(IBookRepository, IMapper) public CommandHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Command, CancellationToken) Handles a request public Task<CreateBook.Response> Handle(CreateBook.Command command, CancellationToken cancellationToken) Parameters command CreateBook.Command cancellationToken CancellationToken Cancellation token Returns Task<CreateBook.Response> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.Response.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.Response.html",
    "title": "Class CreateBook.Response | AdaSoftLibrary",
    "keywords": "Class CreateBook.Response Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class CreateBook.Response : BaseResponse<Book?> Inheritance object BaseResponse<Book> CreateBook.Response Inherited Members BaseResponse<Book>.Success BaseResponse<Book>.Message BaseResponse<Book>.ValidationErrors BaseResponse<Book>.ValidationErrorsSummary BaseResponse<Book>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.CreateBook.html",
    "title": "Class CreateBook | AdaSoftLibrary",
    "keywords": "Class CreateBook Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll Založenie novej knihy public class CreateBook Inheritance object CreateBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.Command.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.Command.html",
    "title": "Class DeleteBook.Command | AdaSoftLibrary",
    "keywords": "Class DeleteBook.Command Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class DeleteBook.Command : IRequest<Unit>, IBaseRequest Inheritance object DeleteBook.Command Implements IRequest<Unit> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Command(int) public Command(int id) Parameters id int Properties Id public int Id { get; set; } Property Value int"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.CommandHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.CommandHandler.html",
    "title": "Class DeleteBook.CommandHandler | AdaSoftLibrary",
    "keywords": "Class DeleteBook.CommandHandler Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class DeleteBook.CommandHandler : IRequestHandler<DeleteBook.Command, Unit> Inheritance object DeleteBook.CommandHandler Implements IRequestHandler<DeleteBook.Command, Unit> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(IBookRepository, IMapper) public CommandHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Command, CancellationToken) Handles a request public Task<Unit> Handle(DeleteBook.Command command, CancellationToken cancellationToken) Parameters command DeleteBook.Command cancellationToken CancellationToken Cancellation token Returns Task<Unit> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.DeleteBook.html",
    "title": "Class DeleteBook | AdaSoftLibrary",
    "keywords": "Class DeleteBook Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll Zmazanie knihy public class DeleteBook Inheritance object DeleteBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.Command.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.Command.html",
    "title": "Class ReturnBook.Command | AdaSoftLibrary",
    "keywords": "Class ReturnBook.Command Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class ReturnBook.Command : IRequest<Unit>, IBaseRequest Inheritance object ReturnBook.Command Implements IRequest<Unit> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Command(int) public Command(int id) Parameters id int Properties Id public int Id { get; set; } Property Value int"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.CommandHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.CommandHandler.html",
    "title": "Class ReturnBook.CommandHandler | AdaSoftLibrary",
    "keywords": "Class ReturnBook.CommandHandler Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class ReturnBook.CommandHandler : IRequestHandler<ReturnBook.Command, Unit> Inheritance object ReturnBook.CommandHandler Implements IRequestHandler<ReturnBook.Command, Unit> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(IBookRepository, IMapper) public CommandHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Command, CancellationToken) Handles a request public Task<Unit> Handle(ReturnBook.Command command, CancellationToken cancellationToken) Parameters command ReturnBook.Command cancellationToken CancellationToken Cancellation token Returns Task<Unit> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.ReturnBook.html",
    "title": "Class ReturnBook | AdaSoftLibrary",
    "keywords": "Class ReturnBook Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll Vrátenie knihy public class ReturnBook Inheritance object ReturnBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.Command.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.Command.html",
    "title": "Class UpdateBook.Command | AdaSoftLibrary",
    "keywords": "Class UpdateBook.Command Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class UpdateBook.Command : IRequest<UpdateBook.Response>, IBaseRequest Inheritance object UpdateBook.Command Implements IRequest<UpdateBook.Response> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author public string Author { get; set; } Property Value string BorrowedFrom public DateOnly? BorrowedFrom { get; set; } Property Value DateOnly? Description public string? Description { get; set; } Property Value string FirstName public string? FirstName { get; set; } Property Value string Id public int Id { get; set; } Property Value int LastName public string? LastName { get; set; } Property Value string Name public string Name { get; set; } Property Value string Year public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.CommandHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.CommandHandler.html",
    "title": "Class UpdateBook.CommandHandler | AdaSoftLibrary",
    "keywords": "Class UpdateBook.CommandHandler Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class UpdateBook.CommandHandler : IRequestHandler<UpdateBook.Command, UpdateBook.Response> Inheritance object UpdateBook.CommandHandler Implements IRequestHandler<UpdateBook.Command, UpdateBook.Response> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CommandHandler(IBookRepository, IMapper) public CommandHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Command, CancellationToken) Handles a request public Task<UpdateBook.Response> Handle(UpdateBook.Command command, CancellationToken cancellationToken) Parameters command UpdateBook.Command cancellationToken CancellationToken Cancellation token Returns Task<UpdateBook.Response> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.Response.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.Response.html",
    "title": "Class UpdateBook.Response | AdaSoftLibrary",
    "keywords": "Class UpdateBook.Response Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll public class UpdateBook.Response : BaseResponse<Book?> Inheritance object BaseResponse<Book> UpdateBook.Response Inherited Members BaseResponse<Book>.Success BaseResponse<Book>.Message BaseResponse<Book>.ValidationErrors BaseResponse<Book>.ValidationErrorsSummary BaseResponse<Book>.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.UpdateBook.html",
    "title": "Class UpdateBook | AdaSoftLibrary",
    "keywords": "Class UpdateBook Namespace AdaSoftLibrary.Application.Books.Commands Assembly AdaSoftLibrary.Application.dll Editácia údajov o knihe public class UpdateBook Inheritance object UpdateBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Commands.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Commands.html",
    "title": "Namespace AdaSoftLibrary.Application.Books.Commands | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Books.Commands Classes BorrowBook Vypožičanie knihy BorrowBook.Command BorrowBook.CommandHandler CreateBook Založenie novej knihy CreateBook.Command CreateBook.CommandHandler CreateBook.Response DeleteBook Zmazanie knihy DeleteBook.Command DeleteBook.CommandHandler ReturnBook Vrátenie knihy ReturnBook.Command ReturnBook.CommandHandler UpdateBook Editácia údajov o knihe UpdateBook.Command UpdateBook.CommandHandler UpdateBook.Response"
  },
  "api/AdaSoftLibrary.Application.Books.Contracts.GetBookResponse.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Contracts.GetBookResponse.html",
    "title": "Class GetBookResponse | AdaSoftLibrary",
    "keywords": "Class GetBookResponse Namespace AdaSoftLibrary.Application.Books.Contracts Assembly AdaSoftLibrary.Application.dll Detail knihy public class GetBookResponse Inheritance object GetBookResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Autor [Required] [Display(Name = \"Autor\")] public string Author { get; set; } Property Value string BorrowedFrom Dátum požičania [Display(Name = \"Dátum požičania\")] public DateOnly? BorrowedFrom { get; set; } Property Value DateOnly? Description Popis [Display(Name = \"Popis\")] public string? Description { get; set; } Property Value string FirstName Meno [Display(Name = \"Meno\")] public string? FirstName { get; set; } Property Value string ID public int ID { get; set; } Property Value int IsBorrowed Dostupnosť [Display(Name = \"Dostupnosť\")] public bool IsBorrowed { get; set; } Property Value bool LastName Priezvisko [Display(Name = \"Priezvisko\")] public string? LastName { get; set; } Property Value string Name Názov [Required] [Display(Name = \"Názov\")] public string Name { get; set; } Property Value string Reader Meno čitateľa [Display(Name = \"Meno čitateľa\")] public string Reader { get; } Property Value string Year Rok [Display(Name = \"Rok\")] public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Application.Books.Contracts.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Contracts.html",
    "title": "Namespace AdaSoftLibrary.Application.Books.Contracts | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Books.Contracts Classes GetBookResponse Detail knihy"
  },
  "api/AdaSoftLibrary.Application.Books.Mapping.BookMappingProfile.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Mapping.BookMappingProfile.html",
    "title": "Class BookMappingProfile | AdaSoftLibrary",
    "keywords": "Class BookMappingProfile Namespace AdaSoftLibrary.Application.Books.Mapping Assembly AdaSoftLibrary.Application.dll public class BookMappingProfile : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile BookMappingProfile Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookMappingProfile() public BookMappingProfile()"
  },
  "api/AdaSoftLibrary.Application.Books.Mapping.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Mapping.html",
    "title": "Namespace AdaSoftLibrary.Application.Books.Mapping | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Books.Mapping Classes BookMappingProfile"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.Query.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.Query.html",
    "title": "Class GetAuthors.Query | AdaSoftLibrary",
    "keywords": "Class GetAuthors.Query Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetAuthors.Query : IRequest<IReadOnlyCollection<string>>, IBaseRequest Inheritance object GetAuthors.Query Implements IRequest<IReadOnlyCollection<string>> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SearchAuthor public string? SearchAuthor { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.QueryHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.QueryHandler.html",
    "title": "Class GetAuthors.QueryHandler | AdaSoftLibrary",
    "keywords": "Class GetAuthors.QueryHandler Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetAuthors.QueryHandler : IRequestHandler<GetAuthors.Query, IReadOnlyCollection<string>> Inheritance object GetAuthors.QueryHandler Implements IRequestHandler<GetAuthors.Query, IReadOnlyCollection<string>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryHandler(IBookRepository, IMapper) public QueryHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Query, CancellationToken) Handles a request public Task<IReadOnlyCollection<string>> Handle(GetAuthors.Query query, CancellationToken cancellationToken) Parameters query GetAuthors.Query cancellationToken CancellationToken Cancellation token Returns Task<IReadOnlyCollection<string>> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetAuthors.html",
    "title": "Class GetAuthors | AdaSoftLibrary",
    "keywords": "Class GetAuthors Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll Vrátí zoznam autorov public class GetAuthors Inheritance object GetAuthors Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBook.Query.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBook.Query.html",
    "title": "Class GetBook.Query | AdaSoftLibrary",
    "keywords": "Class GetBook.Query Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetBook.Query : IRequest<GetBookResponse?>, IBaseRequest Inheritance object GetBook.Query Implements IRequest<GetBookResponse> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Query(int) public Query(int id) Parameters id int Properties Id public int Id { get; set; } Property Value int"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBook.QueryHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBook.QueryHandler.html",
    "title": "Class GetBook.QueryHandler | AdaSoftLibrary",
    "keywords": "Class GetBook.QueryHandler Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetBook.QueryHandler : IRequestHandler<GetBook.Query, GetBookResponse?> Inheritance object GetBook.QueryHandler Implements IRequestHandler<GetBook.Query, GetBookResponse> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryHandler(IBookRepository, IMapper) public QueryHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Query, CancellationToken) Handles a request public Task<GetBookResponse?> Handle(GetBook.Query query, CancellationToken cancellationToken) Parameters query GetBook.Query cancellationToken CancellationToken Cancellation token Returns Task<GetBookResponse> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBook.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBook.html",
    "title": "Class GetBook | AdaSoftLibrary",
    "keywords": "Class GetBook Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll Vrátí informácie o kníhe public class GetBook Inheritance object GetBook Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.Query.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.Query.html",
    "title": "Class GetBooks.Query | AdaSoftLibrary",
    "keywords": "Class GetBooks.Query Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetBooks.Query : IRequest<IReadOnlyCollection<GetBookResponse>>, IBaseRequest Inheritance object GetBooks.Query Implements IRequest<IReadOnlyCollection<GetBookResponse>> IBaseRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Autor public string? Author { get; set; } Property Value string BookFilter Filter pre zoznam kníh BookFilterEnum public BookFilterEnum BookFilter { get; set; } Property Value BookFilterEnum Name Názov public string? Name { get; set; } Property Value string SearchTerm Časť názvu knihy alebo mena autora public string? SearchTerm { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.QueryHandler.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.QueryHandler.html",
    "title": "Class GetBooks.QueryHandler | AdaSoftLibrary",
    "keywords": "Class GetBooks.QueryHandler Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll public class GetBooks.QueryHandler : IRequestHandler<GetBooks.Query, IReadOnlyCollection<GetBookResponse>> Inheritance object GetBooks.QueryHandler Implements IRequestHandler<GetBooks.Query, IReadOnlyCollection<GetBookResponse>> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors QueryHandler(IBookRepository, IMapper) public QueryHandler(IBookRepository bookRepository, IMapper mapper) Parameters bookRepository IBookRepository mapper IMapper Methods Handle(Query, CancellationToken) Handles a request public Task<IReadOnlyCollection<GetBookResponse>> Handle(GetBooks.Query query, CancellationToken cancellationToken) Parameters query GetBooks.Query cancellationToken CancellationToken Cancellation token Returns Task<IReadOnlyCollection<GetBookResponse>> Response from the request"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.GetBooks.html",
    "title": "Class GetBooks | AdaSoftLibrary",
    "keywords": "Class GetBooks Namespace AdaSoftLibrary.Application.Books.Queries Assembly AdaSoftLibrary.Application.dll Vrátí zoznam kníh public class GetBooks Inheritance object GetBooks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Application.Books.Queries.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Queries.html",
    "title": "Namespace AdaSoftLibrary.Application.Books.Queries | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Books.Queries Classes GetAuthors Vrátí zoznam autorov GetAuthors.Query GetAuthors.QueryHandler GetBook Vrátí informácie o kníhe GetBook.Query GetBook.QueryHandler GetBooks Vrátí zoznam kníh GetBooks.Query GetBooks.QueryHandler"
  },
  "api/AdaSoftLibrary.Application.Books.Validation.BorrowBookCommandValidator.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Validation.BorrowBookCommandValidator.html",
    "title": "Class BorrowBookCommandValidator | AdaSoftLibrary",
    "keywords": "Class BorrowBookCommandValidator Namespace AdaSoftLibrary.Application.Books.Validation Assembly AdaSoftLibrary.Application.dll public class BorrowBookCommandValidator : AbstractValidator<BorrowBook.Command>, IValidator<BorrowBook.Command>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<BorrowBook.Command> BorrowBookCommandValidator Implements IValidator<BorrowBook.Command> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<BorrowBook.Command>.Validate(BorrowBook.Command) AbstractValidator<BorrowBook.Command>.ValidateAsync(BorrowBook.Command, CancellationToken) AbstractValidator<BorrowBook.Command>.Validate(ValidationContext<BorrowBook.Command>) AbstractValidator<BorrowBook.Command>.ValidateAsync(ValidationContext<BorrowBook.Command>, CancellationToken) AbstractValidator<BorrowBook.Command>.CreateDescriptor() AbstractValidator<BorrowBook.Command>.RuleFor<TProperty>(Expression<Func<BorrowBook.Command, TProperty>>) AbstractValidator<BorrowBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<BorrowBook.Command, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<BorrowBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<BorrowBook.Command, TProperty>>, Func<BorrowBook.Command, TProperty, TTransformed>) AbstractValidator<BorrowBook.Command>.RuleForEach<TElement>(Expression<Func<BorrowBook.Command, IEnumerable<TElement>>>) AbstractValidator<BorrowBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<BorrowBook.Command, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<BorrowBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<BorrowBook.Command, IEnumerable<TElement>>>, Func<BorrowBook.Command, TElement, TTransformed>) AbstractValidator<BorrowBook.Command>.RuleSet(string, Action) AbstractValidator<BorrowBook.Command>.When(Func<BorrowBook.Command, bool>, Action) AbstractValidator<BorrowBook.Command>.When(Func<BorrowBook.Command, ValidationContext<BorrowBook.Command>, bool>, Action) AbstractValidator<BorrowBook.Command>.Unless(Func<BorrowBook.Command, bool>, Action) AbstractValidator<BorrowBook.Command>.Unless(Func<BorrowBook.Command, ValidationContext<BorrowBook.Command>, bool>, Action) AbstractValidator<BorrowBook.Command>.WhenAsync(Func<BorrowBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<BorrowBook.Command>.WhenAsync(Func<BorrowBook.Command, ValidationContext<BorrowBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<BorrowBook.Command>.UnlessAsync(Func<BorrowBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<BorrowBook.Command>.UnlessAsync(Func<BorrowBook.Command, ValidationContext<BorrowBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<BorrowBook.Command>.Include(IValidator<BorrowBook.Command>) AbstractValidator<BorrowBook.Command>.Include<TValidator>(Func<BorrowBook.Command, TValidator>) AbstractValidator<BorrowBook.Command>.GetEnumerator() AbstractValidator<BorrowBook.Command>.EnsureInstanceNotNull(object) AbstractValidator<BorrowBook.Command>.PreValidate(ValidationContext<BorrowBook.Command>, ValidationResult) AbstractValidator<BorrowBook.Command>.RaiseValidationException(ValidationContext<BorrowBook.Command>, ValidationResult) AbstractValidator<BorrowBook.Command>.OnRuleAdded(IValidationRule<BorrowBook.Command>) AbstractValidator<BorrowBook.Command>.CascadeMode AbstractValidator<BorrowBook.Command>.ClassLevelCascadeMode AbstractValidator<BorrowBook.Command>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BorrowBookCommandValidator(bool?) public BorrowBookCommandValidator(bool? isBorrowed = null) Parameters isBorrowed bool?"
  },
  "api/AdaSoftLibrary.Application.Books.Validation.CreateBookCommandValidator.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Validation.CreateBookCommandValidator.html",
    "title": "Class CreateBookCommandValidator | AdaSoftLibrary",
    "keywords": "Class CreateBookCommandValidator Namespace AdaSoftLibrary.Application.Books.Validation Assembly AdaSoftLibrary.Application.dll public class CreateBookCommandValidator : AbstractValidator<CreateBook.Command>, IValidator<CreateBook.Command>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<CreateBook.Command> CreateBookCommandValidator Implements IValidator<CreateBook.Command> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<CreateBook.Command>.Validate(CreateBook.Command) AbstractValidator<CreateBook.Command>.ValidateAsync(CreateBook.Command, CancellationToken) AbstractValidator<CreateBook.Command>.Validate(ValidationContext<CreateBook.Command>) AbstractValidator<CreateBook.Command>.ValidateAsync(ValidationContext<CreateBook.Command>, CancellationToken) AbstractValidator<CreateBook.Command>.CreateDescriptor() AbstractValidator<CreateBook.Command>.RuleFor<TProperty>(Expression<Func<CreateBook.Command, TProperty>>) AbstractValidator<CreateBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<CreateBook.Command, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<CreateBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<CreateBook.Command, TProperty>>, Func<CreateBook.Command, TProperty, TTransformed>) AbstractValidator<CreateBook.Command>.RuleForEach<TElement>(Expression<Func<CreateBook.Command, IEnumerable<TElement>>>) AbstractValidator<CreateBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateBook.Command, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<CreateBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<CreateBook.Command, IEnumerable<TElement>>>, Func<CreateBook.Command, TElement, TTransformed>) AbstractValidator<CreateBook.Command>.RuleSet(string, Action) AbstractValidator<CreateBook.Command>.When(Func<CreateBook.Command, bool>, Action) AbstractValidator<CreateBook.Command>.When(Func<CreateBook.Command, ValidationContext<CreateBook.Command>, bool>, Action) AbstractValidator<CreateBook.Command>.Unless(Func<CreateBook.Command, bool>, Action) AbstractValidator<CreateBook.Command>.Unless(Func<CreateBook.Command, ValidationContext<CreateBook.Command>, bool>, Action) AbstractValidator<CreateBook.Command>.WhenAsync(Func<CreateBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateBook.Command>.WhenAsync(Func<CreateBook.Command, ValidationContext<CreateBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateBook.Command>.UnlessAsync(Func<CreateBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateBook.Command>.UnlessAsync(Func<CreateBook.Command, ValidationContext<CreateBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<CreateBook.Command>.Include(IValidator<CreateBook.Command>) AbstractValidator<CreateBook.Command>.Include<TValidator>(Func<CreateBook.Command, TValidator>) AbstractValidator<CreateBook.Command>.GetEnumerator() AbstractValidator<CreateBook.Command>.EnsureInstanceNotNull(object) AbstractValidator<CreateBook.Command>.PreValidate(ValidationContext<CreateBook.Command>, ValidationResult) AbstractValidator<CreateBook.Command>.RaiseValidationException(ValidationContext<CreateBook.Command>, ValidationResult) AbstractValidator<CreateBook.Command>.OnRuleAdded(IValidationRule<CreateBook.Command>) AbstractValidator<CreateBook.Command>.CascadeMode AbstractValidator<CreateBook.Command>.ClassLevelCascadeMode AbstractValidator<CreateBook.Command>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CreateBookCommandValidator() public CreateBookCommandValidator()"
  },
  "api/AdaSoftLibrary.Application.Books.Validation.ReturnBookCommandValidator.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Validation.ReturnBookCommandValidator.html",
    "title": "Class ReturnBookCommandValidator | AdaSoftLibrary",
    "keywords": "Class ReturnBookCommandValidator Namespace AdaSoftLibrary.Application.Books.Validation Assembly AdaSoftLibrary.Application.dll public class ReturnBookCommandValidator : AbstractValidator<ReturnBook.Command>, IValidator<ReturnBook.Command>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<ReturnBook.Command> ReturnBookCommandValidator Implements IValidator<ReturnBook.Command> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<ReturnBook.Command>.Validate(ReturnBook.Command) AbstractValidator<ReturnBook.Command>.ValidateAsync(ReturnBook.Command, CancellationToken) AbstractValidator<ReturnBook.Command>.Validate(ValidationContext<ReturnBook.Command>) AbstractValidator<ReturnBook.Command>.ValidateAsync(ValidationContext<ReturnBook.Command>, CancellationToken) AbstractValidator<ReturnBook.Command>.CreateDescriptor() AbstractValidator<ReturnBook.Command>.RuleFor<TProperty>(Expression<Func<ReturnBook.Command, TProperty>>) AbstractValidator<ReturnBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<ReturnBook.Command, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<ReturnBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<ReturnBook.Command, TProperty>>, Func<ReturnBook.Command, TProperty, TTransformed>) AbstractValidator<ReturnBook.Command>.RuleForEach<TElement>(Expression<Func<ReturnBook.Command, IEnumerable<TElement>>>) AbstractValidator<ReturnBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<ReturnBook.Command, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<ReturnBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<ReturnBook.Command, IEnumerable<TElement>>>, Func<ReturnBook.Command, TElement, TTransformed>) AbstractValidator<ReturnBook.Command>.RuleSet(string, Action) AbstractValidator<ReturnBook.Command>.When(Func<ReturnBook.Command, bool>, Action) AbstractValidator<ReturnBook.Command>.When(Func<ReturnBook.Command, ValidationContext<ReturnBook.Command>, bool>, Action) AbstractValidator<ReturnBook.Command>.Unless(Func<ReturnBook.Command, bool>, Action) AbstractValidator<ReturnBook.Command>.Unless(Func<ReturnBook.Command, ValidationContext<ReturnBook.Command>, bool>, Action) AbstractValidator<ReturnBook.Command>.WhenAsync(Func<ReturnBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<ReturnBook.Command>.WhenAsync(Func<ReturnBook.Command, ValidationContext<ReturnBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<ReturnBook.Command>.UnlessAsync(Func<ReturnBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<ReturnBook.Command>.UnlessAsync(Func<ReturnBook.Command, ValidationContext<ReturnBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<ReturnBook.Command>.Include(IValidator<ReturnBook.Command>) AbstractValidator<ReturnBook.Command>.Include<TValidator>(Func<ReturnBook.Command, TValidator>) AbstractValidator<ReturnBook.Command>.GetEnumerator() AbstractValidator<ReturnBook.Command>.EnsureInstanceNotNull(object) AbstractValidator<ReturnBook.Command>.PreValidate(ValidationContext<ReturnBook.Command>, ValidationResult) AbstractValidator<ReturnBook.Command>.RaiseValidationException(ValidationContext<ReturnBook.Command>, ValidationResult) AbstractValidator<ReturnBook.Command>.OnRuleAdded(IValidationRule<ReturnBook.Command>) AbstractValidator<ReturnBook.Command>.CascadeMode AbstractValidator<ReturnBook.Command>.ClassLevelCascadeMode AbstractValidator<ReturnBook.Command>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReturnBookCommandValidator(bool?) public ReturnBookCommandValidator(bool? isBorrowed = null) Parameters isBorrowed bool?"
  },
  "api/AdaSoftLibrary.Application.Books.Validation.UpdateBookCommandValidator.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Validation.UpdateBookCommandValidator.html",
    "title": "Class UpdateBookCommandValidator | AdaSoftLibrary",
    "keywords": "Class UpdateBookCommandValidator Namespace AdaSoftLibrary.Application.Books.Validation Assembly AdaSoftLibrary.Application.dll public class UpdateBookCommandValidator : AbstractValidator<UpdateBook.Command>, IValidator<UpdateBook.Command>, IValidator, IEnumerable<IValidationRule>, IEnumerable Inheritance object AbstractValidator<UpdateBook.Command> UpdateBookCommandValidator Implements IValidator<UpdateBook.Command> IValidator IEnumerable<IValidationRule> IEnumerable Inherited Members AbstractValidator<UpdateBook.Command>.Validate(UpdateBook.Command) AbstractValidator<UpdateBook.Command>.ValidateAsync(UpdateBook.Command, CancellationToken) AbstractValidator<UpdateBook.Command>.Validate(ValidationContext<UpdateBook.Command>) AbstractValidator<UpdateBook.Command>.ValidateAsync(ValidationContext<UpdateBook.Command>, CancellationToken) AbstractValidator<UpdateBook.Command>.CreateDescriptor() AbstractValidator<UpdateBook.Command>.RuleFor<TProperty>(Expression<Func<UpdateBook.Command, TProperty>>) AbstractValidator<UpdateBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<UpdateBook.Command, TProperty>>, Func<TProperty, TTransformed>) AbstractValidator<UpdateBook.Command>.Transform<TProperty, TTransformed>(Expression<Func<UpdateBook.Command, TProperty>>, Func<UpdateBook.Command, TProperty, TTransformed>) AbstractValidator<UpdateBook.Command>.RuleForEach<TElement>(Expression<Func<UpdateBook.Command, IEnumerable<TElement>>>) AbstractValidator<UpdateBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateBook.Command, IEnumerable<TElement>>>, Func<TElement, TTransformed>) AbstractValidator<UpdateBook.Command>.TransformForEach<TElement, TTransformed>(Expression<Func<UpdateBook.Command, IEnumerable<TElement>>>, Func<UpdateBook.Command, TElement, TTransformed>) AbstractValidator<UpdateBook.Command>.RuleSet(string, Action) AbstractValidator<UpdateBook.Command>.When(Func<UpdateBook.Command, bool>, Action) AbstractValidator<UpdateBook.Command>.When(Func<UpdateBook.Command, ValidationContext<UpdateBook.Command>, bool>, Action) AbstractValidator<UpdateBook.Command>.Unless(Func<UpdateBook.Command, bool>, Action) AbstractValidator<UpdateBook.Command>.Unless(Func<UpdateBook.Command, ValidationContext<UpdateBook.Command>, bool>, Action) AbstractValidator<UpdateBook.Command>.WhenAsync(Func<UpdateBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateBook.Command>.WhenAsync(Func<UpdateBook.Command, ValidationContext<UpdateBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateBook.Command>.UnlessAsync(Func<UpdateBook.Command, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateBook.Command>.UnlessAsync(Func<UpdateBook.Command, ValidationContext<UpdateBook.Command>, CancellationToken, Task<bool>>, Action) AbstractValidator<UpdateBook.Command>.Include(IValidator<UpdateBook.Command>) AbstractValidator<UpdateBook.Command>.Include<TValidator>(Func<UpdateBook.Command, TValidator>) AbstractValidator<UpdateBook.Command>.GetEnumerator() AbstractValidator<UpdateBook.Command>.EnsureInstanceNotNull(object) AbstractValidator<UpdateBook.Command>.PreValidate(ValidationContext<UpdateBook.Command>, ValidationResult) AbstractValidator<UpdateBook.Command>.RaiseValidationException(ValidationContext<UpdateBook.Command>, ValidationResult) AbstractValidator<UpdateBook.Command>.OnRuleAdded(IValidationRule<UpdateBook.Command>) AbstractValidator<UpdateBook.Command>.CascadeMode AbstractValidator<UpdateBook.Command>.ClassLevelCascadeMode AbstractValidator<UpdateBook.Command>.RuleLevelCascadeMode object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UpdateBookCommandValidator(bool?) public UpdateBookCommandValidator(bool? isBorrowed = null) Parameters isBorrowed bool?"
  },
  "api/AdaSoftLibrary.Application.Books.Validation.html": {
    "href": "api/AdaSoftLibrary.Application.Books.Validation.html",
    "title": "Namespace AdaSoftLibrary.Application.Books.Validation | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Books.Validation Classes BorrowBookCommandValidator CreateBookCommandValidator ReturnBookCommandValidator UpdateBookCommandValidator"
  },
  "api/AdaSoftLibrary.Application.Common.Configurations.ApplicationOptions.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Configurations.ApplicationOptions.html",
    "title": "Class ApplicationOptions | AdaSoftLibrary",
    "keywords": "Class ApplicationOptions Namespace AdaSoftLibrary.Application.Common.Configurations Assembly AdaSoftLibrary.Application.dll Konfigurácia aplikácie public class ApplicationOptions Inheritance object ApplicationOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields SECTION_NAME public const string SECTION_NAME = \"Application\" Field Value string Properties DataSourceType Typ zdroja dát public DataSourceTypeEnum DataSourceType { get; init; } Property Value DataSourceTypeEnum Password Heslo public string Password { get; init; } Property Value string UserName Uživateľské meno public string UserName { get; init; } Property Value string XmlFilePath Cesta k XML súboru (\"Library.xml\") public string XmlFilePath { get; init; } Property Value string"
  },
  "api/AdaSoftLibrary.Application.Common.Configurations.ApplicationOptionsSetup.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Configurations.ApplicationOptionsSetup.html",
    "title": "Class ApplicationOptionsSetup | AdaSoftLibrary",
    "keywords": "Class ApplicationOptionsSetup Namespace AdaSoftLibrary.Application.Common.Configurations Assembly AdaSoftLibrary.Application.dll public class ApplicationOptionsSetup : IConfigureOptions<ApplicationOptions> Inheritance object ApplicationOptionsSetup Implements IConfigureOptions<ApplicationOptions> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ApplicationOptionsSetup(IConfiguration) public ApplicationOptionsSetup(IConfiguration configuration) Parameters configuration IConfiguration Methods Configure(ApplicationOptions) Invoked to configure a ApplicationOptions instance. public void Configure(ApplicationOptions options) Parameters options ApplicationOptions The options instance to configure."
  },
  "api/AdaSoftLibrary.Application.Common.Configurations.DataSourceTypeEnum.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Configurations.DataSourceTypeEnum.html",
    "title": "Enum DataSourceTypeEnum | AdaSoftLibrary",
    "keywords": "Enum DataSourceTypeEnum Namespace AdaSoftLibrary.Application.Common.Configurations Assembly AdaSoftLibrary.Application.dll Typ zdroja dát public enum DataSourceTypeEnum Extension Methods EnumExtensions.GetDisplayName(Enum) EnumExtensions.GetEnumDescription(Enum) EnumExtensions.GetPropertyValue<T>(Enum, string) EnumExtensions.GetShortName(Enum) EnumExtensions.ToEntryInfo(Enum) Fields SQLite = 1 SQLite databáza - potrebné je nastaviť tiež hodnotu \"DefaultConnection\" v konfigurácii XML = 0 XML súbor - potrebné nastaviť súčasne hodnotu XmlFilePath (default)"
  },
  "api/AdaSoftLibrary.Application.Common.Configurations.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Configurations.html",
    "title": "Namespace AdaSoftLibrary.Application.Common.Configurations | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Common.Configurations Classes ApplicationOptions Konfigurácia aplikácie ApplicationOptionsSetup Enums DataSourceTypeEnum Typ zdroja dát"
  },
  "api/AdaSoftLibrary.Application.Common.Interfaces.IAppDataContext.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Interfaces.IAppDataContext.html",
    "title": "Interface IAppDataContext | AdaSoftLibrary",
    "keywords": "Interface IAppDataContext Namespace AdaSoftLibrary.Application.Common.Interfaces Assembly AdaSoftLibrary.Application.dll public interface IAppDataContext Properties BookList Zoznam kníh List<Book> BookList { get; } Property Value List<Book> Library Data knižnice Library Library { get; init; } Property Value Library Methods SaveChanges() Uloží všetky zmeny v danom kontexte do súboru int SaveChanges() Returns int SaveChangesAsync(CancellationToken) Uloží asynchrónne všetky zmeny v danom kontexte do databázy Task<int> SaveChangesAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken Returns Task<int>"
  },
  "api/AdaSoftLibrary.Application.Common.Interfaces.IBookRepository.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Interfaces.IBookRepository.html",
    "title": "Interface IBookRepository | AdaSoftLibrary",
    "keywords": "Interface IBookRepository Namespace AdaSoftLibrary.Application.Common.Interfaces Assembly AdaSoftLibrary.Application.dll Repozitár kníh public interface IBookRepository Methods AddAsync(Book, CancellationToken) Založenie novej knihy Task<int> AddAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task<int> ID novej knihy DeleteAsync(int, CancellationToken) Zmazanie knihy Task DeleteAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task GetAuthorsAsync(string?, CancellationToken) Vrátí zoznam autorov Task<IEnumerable<string>> GetAuthorsAsync(string? searchAuthor, CancellationToken cancellationToken = default) Parameters searchAuthor string Hľadaný autor cancellationToken CancellationToken Returns Task<IEnumerable<string>> GetByIdAsync(int, CancellationToken) Vrátí informácie o kníhe Task<Book?> GetByIdAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task<Book> Detail knihy alebo null GetListAsync(BookFilterEnum, string?, string?, string?, CancellationToken) Vrátí zoznam kníh Task<IEnumerable<Book>> GetListAsync(BookFilterEnum bookFilter, string? author = null, string? name = null, string? searchTerm = null, CancellationToken cancellationToken = default) Parameters bookFilter BookFilterEnum author string name string searchTerm string Časť názvu knihy alebo mena autora cancellationToken CancellationToken Returns Task<IEnumerable<Book>> Zoznam kníh UpdateAsync(Book, CancellationToken) Editácia údajov o knihe Task UpdateAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task"
  },
  "api/AdaSoftLibrary.Application.Common.Interfaces.IDateTimeProvider.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Interfaces.IDateTimeProvider.html",
    "title": "Interface IDateTimeProvider | AdaSoftLibrary",
    "keywords": "Interface IDateTimeProvider Namespace AdaSoftLibrary.Application.Common.Interfaces Assembly AdaSoftLibrary.Application.dll public interface IDateTimeProvider Properties Now DateTime Now { get; } Property Value DateTime"
  },
  "api/AdaSoftLibrary.Application.Common.Interfaces.IUserAuthenticationService.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Interfaces.IUserAuthenticationService.html",
    "title": "Interface IUserAuthenticationService | AdaSoftLibrary",
    "keywords": "Interface IUserAuthenticationService Namespace AdaSoftLibrary.Application.Common.Interfaces Assembly AdaSoftLibrary.Application.dll public interface IUserAuthenticationService Methods AuthenticateAsync(AuthenticationRequest) Task<AuthenticationResponse> AuthenticateAsync(AuthenticationRequest request) Parameters request AuthenticationRequest Returns Task<AuthenticationResponse>"
  },
  "api/AdaSoftLibrary.Application.Common.Interfaces.html": {
    "href": "api/AdaSoftLibrary.Application.Common.Interfaces.html",
    "title": "Namespace AdaSoftLibrary.Application.Common.Interfaces | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Common.Interfaces Interfaces IAppDataContext IBookRepository Repozitár kníh IDateTimeProvider IUserAuthenticationService"
  },
  "api/AdaSoftLibrary.Application.DependencyInjection.html": {
    "href": "api/AdaSoftLibrary.Application.DependencyInjection.html",
    "title": "Class DependencyInjection | AdaSoftLibrary",
    "keywords": "Class DependencyInjection Namespace AdaSoftLibrary.Application Assembly AdaSoftLibrary.Application.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddApplicationServices(IServiceCollection) public static IServiceCollection AddApplicationServices(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection"
  },
  "api/AdaSoftLibrary.Application.Exceptions.ApiException.html": {
    "href": "api/AdaSoftLibrary.Application.Exceptions.ApiException.html",
    "title": "Class ApiException | AdaSoftLibrary",
    "keywords": "Class ApiException Namespace AdaSoftLibrary.Application.Exceptions Assembly AdaSoftLibrary.Application.dll public class ApiException : ApplicationException, ISerializable Inheritance object Exception ApplicationException ApiException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ApiException() public ApiException() ApiException(string) public ApiException(string message) Parameters message string ApiException(string, params object[]) public ApiException(string message, params object[] args) Parameters message string args object[]"
  },
  "api/AdaSoftLibrary.Application.Exceptions.BadRequestException.html": {
    "href": "api/AdaSoftLibrary.Application.Exceptions.BadRequestException.html",
    "title": "Class BadRequestException | AdaSoftLibrary",
    "keywords": "Class BadRequestException Namespace AdaSoftLibrary.Application.Exceptions Assembly AdaSoftLibrary.Application.dll The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error(e.g., malformed request syntax, invalid request message framing, or deceptive request routing). https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1 public class BadRequestException : ApplicationException, ISerializable Inheritance object Exception ApplicationException BadRequestException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors BadRequestException(string) public BadRequestException(string message) Parameters message string"
  },
  "api/AdaSoftLibrary.Application.Exceptions.NotFoundException.html": {
    "href": "api/AdaSoftLibrary.Application.Exceptions.NotFoundException.html",
    "title": "Class NotFoundException | AdaSoftLibrary",
    "keywords": "Class NotFoundException Namespace AdaSoftLibrary.Application.Exceptions Assembly AdaSoftLibrary.Application.dll The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists. https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.4 public class NotFoundException : ApplicationException, ISerializable Inheritance object Exception ApplicationException NotFoundException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NotFoundException(string, object) public NotFoundException(string name, object key) Parameters name string key object"
  },
  "api/AdaSoftLibrary.Application.Exceptions.ValidationException.html": {
    "href": "api/AdaSoftLibrary.Application.Exceptions.ValidationException.html",
    "title": "Class ValidationException | AdaSoftLibrary",
    "keywords": "Class ValidationException Namespace AdaSoftLibrary.Application.Exceptions Assembly AdaSoftLibrary.Application.dll Validačná vynímka public class ValidationException : ApplicationException, ISerializable Inheritance object Exception ApplicationException ValidationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ValidationException(ValidationResult) public ValidationException(ValidationResult validationResult) Parameters validationResult ValidationResult Properties ValdationErrors public List<string> ValdationErrors { get; set; } Property Value List<string> Methods AddCustomError(string) public void AddCustomError(string errorMessage) Parameters errorMessage string"
  },
  "api/AdaSoftLibrary.Application.Exceptions.html": {
    "href": "api/AdaSoftLibrary.Application.Exceptions.html",
    "title": "Namespace AdaSoftLibrary.Application.Exceptions | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Exceptions Classes ApiException BadRequestException The 400 (Bad Request) status code indicates that the server cannot or will not process the request due to something that is perceived to be a client error(e.g., malformed request syntax, invalid request message framing, or deceptive request routing). https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.1 NotFoundException The 404 (Not Found) status code indicates that the origin server did not find a current representation for the target resource or is not willing to disclose that one exists. https://datatracker.ietf.org/doc/html/rfc7231#section-6.5.4 ValidationException Validačná vynímka"
  },
  "api/AdaSoftLibrary.Application.Extensions.EnumExtensions.EnumEntryInfo.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.EnumExtensions.EnumEntryInfo.html",
    "title": "Class EnumExtensions.EnumEntryInfo | AdaSoftLibrary",
    "keywords": "Class EnumExtensions.EnumEntryInfo Namespace AdaSoftLibrary.Application.Extensions Assembly AdaSoftLibrary.Application.dll public class EnumExtensions.EnumEntryInfo Inheritance object EnumExtensions.EnumEntryInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisplayName public string DisplayName { get; set; } Property Value string DisplayOrder public int DisplayOrder { get; set; } Property Value int Value public int Value { get; set; } Property Value int"
  },
  "api/AdaSoftLibrary.Application.Extensions.EnumExtensions.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.EnumExtensions.html",
    "title": "Class EnumExtensions | AdaSoftLibrary",
    "keywords": "Class EnumExtensions Namespace AdaSoftLibrary.Application.Extensions Assembly AdaSoftLibrary.Application.dll public static class EnumExtensions Inheritance object EnumExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDisplayName(Enum) public static string GetDisplayName(this Enum @enum) Parameters enum Enum Returns string GetEntryInfos<TEnum>() public static IEnumerable<EnumExtensions.EnumEntryInfo> GetEntryInfos<TEnum>() where TEnum : struct, IComparable, IFormattable, IConvertible Returns IEnumerable<EnumExtensions.EnumEntryInfo> Type Parameters TEnum GetEnumDescription(Enum) public static string? GetEnumDescription(this Enum en) Parameters en Enum Returns string GetPropertyValue<T>(Enum, string) public static T? GetPropertyValue<T>(this Enum @enum, string propName) Parameters enum Enum propName string Returns T Type Parameters T GetShortName(Enum) public static string GetShortName(this Enum @enum) Parameters enum Enum Returns string GetValue<TEnum>(string) public static TEnum GetValue<TEnum>(string enumName) where TEnum : struct Parameters enumName string Returns TEnum Type Parameters TEnum ToEntryInfo(Enum) public static EnumExtensions.EnumEntryInfo ToEntryInfo(this Enum @enum) Parameters enum Enum Returns EnumExtensions.EnumEntryInfo ToEnum<TEnum>(string?, TEnum?) public static TEnum? ToEnum<TEnum>(this string? value, TEnum? defaultValue = null) where TEnum : struct Parameters value string defaultValue TEnum? Returns TEnum? Type Parameters TEnum ToEnum<TEnum>(string, TEnum) public static TEnum ToEnum<TEnum>(this string value, TEnum defaultValue) where TEnum : struct Parameters value string defaultValue TEnum Returns TEnum Type Parameters TEnum"
  },
  "api/AdaSoftLibrary.Application.Extensions.GlobalErrorHandlerExtension.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.GlobalErrorHandlerExtension.html",
    "title": "Class GlobalErrorHandlerExtension | AdaSoftLibrary",
    "keywords": "Class GlobalErrorHandlerExtension Namespace AdaSoftLibrary.Application.Extensions Assembly AdaSoftLibrary.Application.dll public static class GlobalErrorHandlerExtension Inheritance object GlobalErrorHandlerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddGlobalErrorHandler(IServiceCollection) public static void AddGlobalErrorHandler(this IServiceCollection services) Parameters services IServiceCollection UseGlobalErrorHandlerMiddleware(IApplicationBuilder) public static IApplicationBuilder UseGlobalErrorHandlerMiddleware(this IApplicationBuilder applicationBuilder) Parameters applicationBuilder IApplicationBuilder Returns IApplicationBuilder"
  },
  "api/AdaSoftLibrary.Application.Extensions.StringExtensions.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.StringExtensions.html",
    "title": "Class StringExtensions | AdaSoftLibrary",
    "keywords": "Class StringExtensions Namespace AdaSoftLibrary.Application.Extensions Assembly AdaSoftLibrary.Application.dll public static class StringExtensions Inheritance object StringExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RemoveDiacritics(string) A string extension method that removes the diacritics character from the strings https://csharp-extension.com. public static string RemoveDiacritics(this string @this) Parameters this string The @this to act on. Returns string The string without diacritics character."
  },
  "api/AdaSoftLibrary.Application.Extensions.SwaggerExtension.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.SwaggerExtension.html",
    "title": "Class SwaggerExtension | AdaSoftLibrary",
    "keywords": "Class SwaggerExtension Namespace AdaSoftLibrary.Application.Extensions Assembly AdaSoftLibrary.Application.dll public static class SwaggerExtension Inheritance object SwaggerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddSwagger(IServiceCollection, string) public static void AddSwagger(this IServiceCollection services, string version = \"v1\") Parameters services IServiceCollection version string"
  },
  "api/AdaSoftLibrary.Application.Extensions.html": {
    "href": "api/AdaSoftLibrary.Application.Extensions.html",
    "title": "Namespace AdaSoftLibrary.Application.Extensions | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Extensions Classes EnumExtensions EnumExtensions.EnumEntryInfo GlobalErrorHandlerExtension StringExtensions SwaggerExtension"
  },
  "api/AdaSoftLibrary.Application.Middleware.GlobalErrorHandlerMiddleware.html": {
    "href": "api/AdaSoftLibrary.Application.Middleware.GlobalErrorHandlerMiddleware.html",
    "title": "Class GlobalErrorHandlerMiddleware | AdaSoftLibrary",
    "keywords": "Class GlobalErrorHandlerMiddleware Namespace AdaSoftLibrary.Application.Middleware Assembly AdaSoftLibrary.Application.dll Global Exception Handling Middleware https://datatracker.ietf.org/doc/html/rfc7807 public class GlobalErrorHandlerMiddleware : IMiddleware Inheritance object GlobalErrorHandlerMiddleware Implements IMiddleware Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalErrorHandlerMiddleware(ILogger<GlobalErrorHandlerMiddleware>) public GlobalErrorHandlerMiddleware(ILogger<GlobalErrorHandlerMiddleware> logger) Parameters logger ILogger<GlobalErrorHandlerMiddleware> Methods InvokeAsync(HttpContext, RequestDelegate) Request handling method. public Task InvokeAsync(HttpContext context, RequestDelegate next) Parameters context HttpContext The HttpContext for the current request. next RequestDelegate The delegate representing the remaining middleware in the request pipeline. Returns Task A Task that represents the execution of this middleware."
  },
  "api/AdaSoftLibrary.Application.Middleware.html": {
    "href": "api/AdaSoftLibrary.Application.Middleware.html",
    "title": "Namespace AdaSoftLibrary.Application.Middleware | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Middleware Classes GlobalErrorHandlerMiddleware Global Exception Handling Middleware https://datatracker.ietf.org/doc/html/rfc7807"
  },
  "api/AdaSoftLibrary.Application.Security.AuthorizeAttribute.html": {
    "href": "api/AdaSoftLibrary.Application.Security.AuthorizeAttribute.html",
    "title": "Class AuthorizeAttribute | AdaSoftLibrary",
    "keywords": "Class AuthorizeAttribute Namespace AdaSoftLibrary.Application.Security Assembly AdaSoftLibrary.Application.dll Specifies the class this attribute is applied to requires authorization. [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = true)] public class AuthorizeAttribute : Attribute Inheritance object Attribute AuthorizeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorizeAttribute() Initializes a new instance of the AuthorizeAttribute class. public AuthorizeAttribute() Properties Roles Gets or sets a comma delimited list of roles that are allowed to access the resource. public string Roles { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Application.Security.html": {
    "href": "api/AdaSoftLibrary.Application.Security.html",
    "title": "Namespace AdaSoftLibrary.Application.Security | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application.Security Classes AuthorizeAttribute Specifies the class this attribute is applied to requires authorization."
  },
  "api/AdaSoftLibrary.Application.html": {
    "href": "api/AdaSoftLibrary.Application.html",
    "title": "Namespace AdaSoftLibrary.Application | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Application Classes DependencyInjection"
  },
  "api/AdaSoftLibrary.Domain.Authentication.AuthenticationRequest.html": {
    "href": "api/AdaSoftLibrary.Domain.Authentication.AuthenticationRequest.html",
    "title": "Class AuthenticationRequest | AdaSoftLibrary",
    "keywords": "Class AuthenticationRequest Namespace AdaSoftLibrary.Domain.Authentication Assembly AdaSoftLibrary.Domain.dll public class AuthenticationRequest Inheritance object AuthenticationRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password public string Password { get; set; } Property Value string UserName public string UserName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Domain.Authentication.AuthenticationResponse.html": {
    "href": "api/AdaSoftLibrary.Domain.Authentication.AuthenticationResponse.html",
    "title": "Class AuthenticationResponse | AdaSoftLibrary",
    "keywords": "Class AuthenticationResponse Namespace AdaSoftLibrary.Domain.Authentication Assembly AdaSoftLibrary.Domain.dll public class AuthenticationResponse Inheritance object AuthenticationResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsVerified public bool IsVerified { get; set; } Property Value bool UserName public string UserName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Domain.Authentication.html": {
    "href": "api/AdaSoftLibrary.Domain.Authentication.html",
    "title": "Namespace AdaSoftLibrary.Domain.Authentication | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Domain.Authentication Classes AuthenticationRequest AuthenticationResponse"
  },
  "api/AdaSoftLibrary.Domain.Common.BaseEntity-1.html": {
    "href": "api/AdaSoftLibrary.Domain.Common.BaseEntity-1.html",
    "title": "Class BaseEntity<TKey> | AdaSoftLibrary",
    "keywords": "Class BaseEntity<TKey> Namespace AdaSoftLibrary.Domain.Common Assembly AdaSoftLibrary.Domain.dll public abstract class BaseEntity<TKey> : IHasKey<TKey> Type Parameters TKey Inheritance object BaseEntity<TKey> Implements IHasKey<TKey> Derived Book Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id ID [Key] public TKey Id { get; set; } Property Value TKey"
  },
  "api/AdaSoftLibrary.Domain.Common.BaseResponse-1.html": {
    "href": "api/AdaSoftLibrary.Domain.Common.BaseResponse-1.html",
    "title": "Class BaseResponse<T> | AdaSoftLibrary",
    "keywords": "Class BaseResponse<T> Namespace AdaSoftLibrary.Domain.Common Assembly AdaSoftLibrary.Domain.dll public class BaseResponse<T> Type Parameters T Inheritance object BaseResponse<T> Derived CreateBook.Response UpdateBook.Response Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BaseResponse() public BaseResponse() BaseResponse(string) public BaseResponse(string message) Parameters message string BaseResponse(string, bool) public BaseResponse(string message, bool success) Parameters message string success bool BaseResponse(T, string?) public BaseResponse(T data, string? message = null) Parameters data T message string Properties Data public T Data { get; set; } Property Value T Message public string? Message { get; set; } Property Value string Success public bool Success { get; set; } Property Value bool ValidationErrors public List<string>? ValidationErrors { get; set; } Property Value List<string> ValidationErrorsSummary public string? ValidationErrorsSummary { get; } Property Value string"
  },
  "api/AdaSoftLibrary.Domain.Common.IHasKey-1.html": {
    "href": "api/AdaSoftLibrary.Domain.Common.IHasKey-1.html",
    "title": "Interface IHasKey<T> | AdaSoftLibrary",
    "keywords": "Interface IHasKey<T> Namespace AdaSoftLibrary.Domain.Common Assembly AdaSoftLibrary.Domain.dll public interface IHasKey<T> Type Parameters T Properties Id T Id { get; set; } Property Value T"
  },
  "api/AdaSoftLibrary.Domain.Common.html": {
    "href": "api/AdaSoftLibrary.Domain.Common.html",
    "title": "Namespace AdaSoftLibrary.Domain.Common | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Domain.Common Classes BaseEntity<TKey> BaseResponse<T> Interfaces IHasKey<T>"
  },
  "api/AdaSoftLibrary.Domain.Constants.Roles.html": {
    "href": "api/AdaSoftLibrary.Domain.Constants.Roles.html",
    "title": "Class Roles | AdaSoftLibrary",
    "keywords": "Class Roles Namespace AdaSoftLibrary.Domain.Constants Assembly AdaSoftLibrary.Domain.dll public abstract class Roles Inheritance object Roles Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Administrator public const string Administrator = \"Administrator\" Field Value string"
  },
  "api/AdaSoftLibrary.Domain.Constants.html": {
    "href": "api/AdaSoftLibrary.Domain.Constants.html",
    "title": "Namespace AdaSoftLibrary.Domain.Constants | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Domain.Constants Classes Roles"
  },
  "api/AdaSoftLibrary.Domain.Entities.Book.html": {
    "href": "api/AdaSoftLibrary.Domain.Entities.Book.html",
    "title": "Class Book | AdaSoftLibrary",
    "keywords": "Class Book Namespace AdaSoftLibrary.Domain.Entities Assembly AdaSoftLibrary.Domain.dll Kniha [Table(\"Book\")] public class Book : BaseEntity<int>, IHasKey<int> Inheritance object BaseEntity<int> Book Implements IHasKey<int> Inherited Members BaseEntity<int>.Id object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Autor (max. 250 znakov) [Required] [MaxLength(250)] public string Author { get; set; } Property Value string Borrowed public Borrowed? Borrowed { get; set; } Property Value Borrowed Description Popis public string? Description { get; set; } Property Value string IsBorrowed Je kniha požičaná ? [NotMapped] public bool IsBorrowed { get; } Property Value bool Name Názov (max. 1000 znakov) [Required] [MaxLength(1000)] public string Name { get; set; } Property Value string Year Rok [Range(0, 9999)] public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Domain.Entities.Borrowed.html": {
    "href": "api/AdaSoftLibrary.Domain.Entities.Borrowed.html",
    "title": "Class Borrowed | AdaSoftLibrary",
    "keywords": "Class Borrowed Namespace AdaSoftLibrary.Domain.Entities Assembly AdaSoftLibrary.Domain.dll Údaje o výpožičke [Table(\"Borrowed\")] public class Borrowed Inheritance object Borrowed Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Book public virtual Book Book { get; set; } Property Value Book BookId ID - len pre databázu [Key] [ForeignKey(\"Book\")] public int BookId { get; set; } Property Value int FirstName Meno (max. 100 znakov) [Required] [MinLength(3)] [MaxLength(100)] public string FirstName { get; set; } Property Value string From Dátum požičania (format \"d.M.yyyy\") [NotMapped] public string From { get; set; } Property Value string FromDate Dátum požičania [DataType(DataType.Date)] public DateOnly? FromDate { get; set; } Property Value DateOnly? FullName Celé meno čitateľa [NotMapped] public string FullName { get; } Property Value string LastName Priezvisko (max. 100 znakov) [Required] [MinLength(3)] [MaxLength(100)] public string LastName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Domain.Entities.Library.html": {
    "href": "api/AdaSoftLibrary.Domain.Entities.Library.html",
    "title": "Class Library | AdaSoftLibrary",
    "keywords": "Class Library Namespace AdaSoftLibrary.Domain.Entities Assembly AdaSoftLibrary.Domain.dll Knižnica public class Library Inheritance object Library Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Books [Required] public List<Book> Books { get; set; } Property Value List<Book>"
  },
  "api/AdaSoftLibrary.Domain.Entities.html": {
    "href": "api/AdaSoftLibrary.Domain.Entities.html",
    "title": "Namespace AdaSoftLibrary.Domain.Entities | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Domain.Entities Classes Book Kniha Borrowed Údaje o výpožičke Library Knižnica"
  },
  "api/AdaSoftLibrary.Domain.Enums.BookFilterEnum.html": {
    "href": "api/AdaSoftLibrary.Domain.Enums.BookFilterEnum.html",
    "title": "Enum BookFilterEnum | AdaSoftLibrary",
    "keywords": "Enum BookFilterEnum Namespace AdaSoftLibrary.Domain.Enums Assembly AdaSoftLibrary.Domain.dll Filter pre zoznam kníh [JsonConverter(typeof(JsonStringEnumConverter))] public enum BookFilterEnum Extension Methods EnumExtensions.GetDisplayName(Enum) EnumExtensions.GetEnumDescription(Enum) EnumExtensions.GetPropertyValue<T>(Enum, string) EnumExtensions.GetShortName(Enum) EnumExtensions.ToEntryInfo(Enum) Fields [Display(Name = \"Všetky knihy\")] AllBooks = 0 Všetky knihy [Display(Name = \"Požičané knihy\")] BorrowedBooks = 2 Požičané knihy [Display(Name = \"Voľné knihy\")] FreeBooks = 1 Voľné knihy"
  },
  "api/AdaSoftLibrary.Domain.Enums.html": {
    "href": "api/AdaSoftLibrary.Domain.Enums.html",
    "title": "Namespace AdaSoftLibrary.Domain.Enums | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Domain.Enums Enums BookFilterEnum Filter pre zoznam kníh"
  },
  "api/AdaSoftLibrary.Infrastructure.DependencyInjection.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.DependencyInjection.html",
    "title": "Class DependencyInjection | AdaSoftLibrary",
    "keywords": "Class DependencyInjection Namespace AdaSoftLibrary.Infrastructure Assembly AdaSoftLibrary.Infrastructure.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInfrastructureServices(IServiceCollection, IConfiguration) public static IServiceCollection AddInfrastructureServices(this IServiceCollection services, IConfiguration configuration) Parameters services IServiceCollection configuration IConfiguration Returns IServiceCollection"
  },
  "api/AdaSoftLibrary.Infrastructure.Extensions.MigrationExtension.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Extensions.MigrationExtension.html",
    "title": "Class MigrationExtension | AdaSoftLibrary",
    "keywords": "Class MigrationExtension Namespace AdaSoftLibrary.Infrastructure.Extensions Assembly AdaSoftLibrary.Infrastructure.dll public static class MigrationExtension Inheritance object MigrationExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ApplyMigrations(IApplicationBuilder) public static void ApplyMigrations(this IApplicationBuilder app) Parameters app IApplicationBuilder"
  },
  "api/AdaSoftLibrary.Infrastructure.Extensions.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Extensions.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Extensions | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Extensions Classes MigrationExtension"
  },
  "api/AdaSoftLibrary.Infrastructure.Migrations.AddBookYear.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Migrations.AddBookYear.html",
    "title": "Class AddBookYear | AdaSoftLibrary",
    "keywords": "Class AddBookYear Namespace AdaSoftLibrary.Infrastructure.Migrations Assembly AdaSoftLibrary.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20240621114830_AddBookYear\")] public class AddBookYear : Migration Inheritance object Migration AddBookYear Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdaSoftLibrary.Infrastructure.Migrations.InitialMigration.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Migrations.InitialMigration.html",
    "title": "Class InitialMigration | AdaSoftLibrary",
    "keywords": "Class InitialMigration Namespace AdaSoftLibrary.Infrastructure.Migrations Assembly AdaSoftLibrary.Infrastructure.dll A base class inherited by each EF Core migration. [DbContext(typeof(AppDbContext))] [Migration(\"20240619195802_InitialMigration\")] public class InitialMigration : Migration Inheritance object Migration InitialMigration Inherited Members Migration.InitialDatabase Migration.TargetModel Migration.UpOperations Migration.DownOperations Migration.ActiveProvider object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Remarks See Database migrations for more information and examples. Methods BuildTargetModel(ModelBuilder) Implemented to build the TargetModel. protected override void BuildTargetModel(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The ModelBuilder to use to build the model. Remarks See Database migrations for more information and examples. Down(MigrationBuilder) Builds the operations that will migrate the database 'down'. protected override void Down(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by this migration so that it returns to the state that it was in before this migration was applied. This method must be overridden in each class that inherits from Migration if both 'up' and 'down' migrations are to be supported. If it is not overridden, then calling it will throw and it will not be possible to migrate in the 'down' direction. See Database migrations for more information and examples. Up(MigrationBuilder) Builds the operations that will migrate the database 'up'. protected override void Up(MigrationBuilder migrationBuilder) Parameters migrationBuilder MigrationBuilder The MigrationBuilder that will build the operations. Remarks That is, builds the operations that will take the database from the state left in by the previous migration so that it is up-to-date with regard to this migration. This method must be overridden in each class that inherits from Migration. See Database migrations for more information and examples."
  },
  "api/AdaSoftLibrary.Infrastructure.Migrations.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Migrations.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Migrations | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Migrations Classes AddBookYear A base class inherited by each EF Core migration. InitialMigration A base class inherited by each EF Core migration."
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.AppDbContext.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.AppDbContext.html",
    "title": "Class AppDbContext | AdaSoftLibrary",
    "keywords": "Class AppDbContext Namespace AdaSoftLibrary.Infrastructure.Persistence Assembly AdaSoftLibrary.Infrastructure.dll public class AppDbContext : DbContext, IInfrastructure<IServiceProvider>, IDbContextDependencies, IDbSetCache, IDbContextPoolable, IResettableService, IDisposable, IAsyncDisposable, IAppDataContext Inheritance object DbContext AppDbContext Implements IInfrastructure<IServiceProvider> IDbContextDependencies IDbSetCache IDbContextPoolable IResettableService IDisposable IAsyncDisposable IAppDataContext Inherited Members DbContext.Set<TEntity>() DbContext.Set<TEntity>(string) DbContext.OnConfiguring(DbContextOptionsBuilder) DbContext.ConfigureConventions(ModelConfigurationBuilder) DbContext.SaveChanges() DbContext.SaveChanges(bool) DbContext.SaveChangesAsync(CancellationToken) DbContext.SaveChangesAsync(bool, CancellationToken) DbContext.Dispose() DbContext.DisposeAsync() DbContext.Entry<TEntity>(TEntity) DbContext.Entry(object) DbContext.Add<TEntity>(TEntity) DbContext.AddAsync<TEntity>(TEntity, CancellationToken) DbContext.Attach<TEntity>(TEntity) DbContext.Update<TEntity>(TEntity) DbContext.Remove<TEntity>(TEntity) DbContext.Add(object) DbContext.AddAsync(object, CancellationToken) DbContext.Attach(object) DbContext.Update(object) DbContext.Remove(object) DbContext.AddRange(params object[]) DbContext.AddRangeAsync(params object[]) DbContext.AttachRange(params object[]) DbContext.UpdateRange(params object[]) DbContext.RemoveRange(params object[]) DbContext.AddRange(IEnumerable<object>) DbContext.AddRangeAsync(IEnumerable<object>, CancellationToken) DbContext.AttachRange(IEnumerable<object>) DbContext.UpdateRange(IEnumerable<object>) DbContext.RemoveRange(IEnumerable<object>) DbContext.Find(Type, params object[]) DbContext.FindAsync(Type, params object[]) DbContext.FindAsync(Type, object[], CancellationToken) DbContext.Find<TEntity>(params object[]) DbContext.FindAsync<TEntity>(params object[]) DbContext.FindAsync<TEntity>(object[], CancellationToken) DbContext.FromExpression<TResult>(Expression<Func<IQueryable<TResult>>>) DbContext.Database DbContext.ChangeTracker DbContext.Model DbContext.ContextId DbContext.SavingChanges DbContext.SavedChanges DbContext.SaveChangesFailed object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AppDbContext(DbContextOptions<AppDbContext>, ILogger<AppDbContext>) public AppDbContext(DbContextOptions<AppDbContext> options, ILogger<AppDbContext> logger) Parameters options DbContextOptions<AppDbContext> logger ILogger<AppDbContext> Properties BookList Zoznam kníh public List<Book> BookList { get; } Property Value List<Book> Books public virtual DbSet<Book> Books { get; set; } Property Value DbSet<Book> Borroweds public virtual DbSet<Borrowed> Borroweds { get; set; } Property Value DbSet<Borrowed> Library Data knižnice public Library Library { get; init; } Property Value Library Methods OnModelCreating(ModelBuilder) Override this method to further configure the model that was discovered by convention from the entity types exposed in DbSet<TEntity> properties on your derived context. The resulting model may be cached and re-used for subsequent instances of your derived context. protected override void OnModelCreating(ModelBuilder modelBuilder) Parameters modelBuilder ModelBuilder The builder being used to construct the model for this context. Databases (and other extensions) typically define extension methods on this object that allow you to configure aspects of the model that are specific to a given database. Remarks If a model is explicitly set on the options for this context (via UseModel(IModel)) then this method will not be run. However, it will still run when creating a compiled model. See Modeling entity types and relationships for more information and examples."
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.BookList.BookXmlRepository.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.BookList.BookXmlRepository.html",
    "title": "Class BookXmlRepository | AdaSoftLibrary",
    "keywords": "Class BookXmlRepository Namespace AdaSoftLibrary.Infrastructure.Persistence.BookList Assembly AdaSoftLibrary.Infrastructure.dll public class BookXmlRepository : IBookRepository Inheritance object BookXmlRepository Implements IBookRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookXmlRepository(IAppDataContext) public BookXmlRepository(IAppDataContext _xmlContext) Parameters _xmlContext IAppDataContext Methods AddAsync(Book, CancellationToken) Založenie novej knihy public Task<int> AddAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task<int> ID novej knihy DeleteAsync(int, CancellationToken) Zmazanie knihy public Task DeleteAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task GetAuthorsAsync(string?, CancellationToken) Vrátí zoznam autorov public Task<IEnumerable<string>> GetAuthorsAsync(string? searchAuthor, CancellationToken cancellationToken = default) Parameters searchAuthor string Hľadaný autor cancellationToken CancellationToken Returns Task<IEnumerable<string>> GetByIdAsync(int, CancellationToken) Vrátí informácie o kníhe public Task<Book?> GetByIdAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task<Book> Detail knihy alebo null GetListAsync(BookFilterEnum, string?, string?, string?, CancellationToken) Vrátí zoznam kníh public Task<IEnumerable<Book>> GetListAsync(BookFilterEnum bookFilter, string? author = null, string? name = null, string? searchTerm = null, CancellationToken cancellationToken = default) Parameters bookFilter BookFilterEnum author string name string searchTerm string Časť názvu knihy alebo mena autora cancellationToken CancellationToken Returns Task<IEnumerable<Book>> Zoznam kníh UpdateAsync(Book, CancellationToken) Editácia údajov o knihe public Task UpdateAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task"
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.BookList.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.BookList.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Persistence.BookList | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Persistence.BookList Classes BookXmlRepository"
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.Books.BookDbRepository.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.Books.BookDbRepository.html",
    "title": "Class BookDbRepository | AdaSoftLibrary",
    "keywords": "Class BookDbRepository Namespace AdaSoftLibrary.Infrastructure.Persistence.Books Assembly AdaSoftLibrary.Infrastructure.dll public class BookDbRepository : IBookRepository Inheritance object BookDbRepository Implements IBookRepository Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookDbRepository(AppDbContext) public BookDbRepository(AppDbContext _dbContext) Parameters _dbContext AppDbContext Methods AddAsync(Book, CancellationToken) Založenie novej knihy public Task<int> AddAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task<int> ID novej knihy DeleteAsync(int, CancellationToken) Zmazanie knihy public Task DeleteAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task GetAuthorsAsync(string?, CancellationToken) Vrátí zoznam autorov public Task<IEnumerable<string>> GetAuthorsAsync(string? searchAuthor, CancellationToken cancellationToken = default) Parameters searchAuthor string Hľadaný autor cancellationToken CancellationToken Returns Task<IEnumerable<string>> GetByIdAsync(int, CancellationToken) Vrátí informácie o kníhe public Task<Book?> GetByIdAsync(int id, CancellationToken cancellationToken = default) Parameters id int ID knihy cancellationToken CancellationToken Returns Task<Book> Detail knihy alebo null GetListAsync(BookFilterEnum, string?, string?, string?, CancellationToken) Vrátí zoznam kníh public Task<IEnumerable<Book>> GetListAsync(BookFilterEnum bookFilter, string? author = null, string? name = null, string? searchTerm = null, CancellationToken cancellationToken = default) Parameters bookFilter BookFilterEnum author string name string searchTerm string Časť názvu knihy alebo mena autora cancellationToken CancellationToken Returns Task<IEnumerable<Book>> Zoznam kníh UpdateAsync(Book, CancellationToken) Editácia údajov o knihe public Task UpdateAsync(Book book, CancellationToken cancellationToken = default) Parameters book Book cancellationToken CancellationToken Returns Task"
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.Books.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.Books.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Persistence.Books | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Persistence.Books Classes BookDbRepository"
  },
  "api/AdaSoftLibrary.Infrastructure.Persistence.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Persistence.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Persistence | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Persistence Classes AppDbContext"
  },
  "api/AdaSoftLibrary.Infrastructure.Security.UserAuthenticationService.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Security.UserAuthenticationService.html",
    "title": "Class UserAuthenticationService | AdaSoftLibrary",
    "keywords": "Class UserAuthenticationService Namespace AdaSoftLibrary.Infrastructure.Security Assembly AdaSoftLibrary.Infrastructure.dll public class UserAuthenticationService : IUserAuthenticationService Inheritance object UserAuthenticationService Implements IUserAuthenticationService Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors UserAuthenticationService(IOptions<ApplicationOptions>) public UserAuthenticationService(IOptions<ApplicationOptions> options) Parameters options IOptions<ApplicationOptions> Methods AuthenticateAsync(AuthenticationRequest) public Task<AuthenticationResponse> AuthenticateAsync(AuthenticationRequest request) Parameters request AuthenticationRequest Returns Task<AuthenticationResponse>"
  },
  "api/AdaSoftLibrary.Infrastructure.Security.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.Security.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure.Security | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure.Security Classes UserAuthenticationService"
  },
  "api/AdaSoftLibrary.Infrastructure.html": {
    "href": "api/AdaSoftLibrary.Infrastructure.html",
    "title": "Namespace AdaSoftLibrary.Infrastructure | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Infrastructure Classes DependencyInjection"
  },
  "api/AdaSoftLibrary.Web.Common.DateCurrentOrInPastAttribute.html": {
    "href": "api/AdaSoftLibrary.Web.Common.DateCurrentOrInPastAttribute.html",
    "title": "Class DateCurrentOrInPastAttribute | AdaSoftLibrary",
    "keywords": "Class DateCurrentOrInPastAttribute Namespace AdaSoftLibrary.Web.Common Assembly AdaSoftLibrary.Web.dll Validačný atribút kontroľuje, či je zadaná hodnota aktuálny dátum alebo v minulosti. [AttributeUsage(AttributeTargets.Property)] public class DateCurrentOrInPastAttribute : ValidationAttribute Inheritance object Attribute ValidationAttribute DateCurrentOrInPastAttribute Inherited Members ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FormatErrorMessage(string) Applies formatting to an error message, based on the data field where the error occurred. public override string FormatErrorMessage(string name) Parameters name string The name to include in the formatted message. Returns string An instance of the formatted error message. Exceptions InvalidOperationException The current attribute is malformed. IsValid(object, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult IsValid(object value, ValidationContext validationContext) Parameters value object The value to validate. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult class. Exceptions InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class."
  },
  "api/AdaSoftLibrary.Web.Common.RequiredIfCustom.html": {
    "href": "api/AdaSoftLibrary.Web.Common.RequiredIfCustom.html",
    "title": "Class RequiredIfCustom | AdaSoftLibrary",
    "keywords": "Class RequiredIfCustom Namespace AdaSoftLibrary.Web.Common Assembly AdaSoftLibrary.Web.dll Validačný atribút kontroľuje, či je splnená podmienke pre požadovanú hodnotu [AttributeUsage(AttributeTargets.Property)] public class RequiredIfCustom : ValidationAttribute Inheritance object Attribute ValidationAttribute RequiredIfCustom Inherited Members ValidationAttribute.FormatErrorMessage(string) ValidationAttribute.GetValidationResult(object, ValidationContext) ValidationAttribute.IsValid(object) ValidationAttribute.Validate(object, ValidationContext) ValidationAttribute.Validate(object, string) ValidationAttribute.ErrorMessage ValidationAttribute.ErrorMessageResourceName ValidationAttribute.ErrorMessageResourceType ValidationAttribute.ErrorMessageString ValidationAttribute.RequiresValidationContext Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RequiredIfCustom(string, object) Validačný atribút kontroľuje, či je splnená podmienke pre požadovanú hodnotu public RequiredIfCustom(string otherProperty, object targetValue) Parameters otherProperty string targetValue object Methods IsValid(object, ValidationContext) Validates the specified value with respect to the current validation attribute. protected override ValidationResult IsValid(object value, ValidationContext validationContext) Parameters value object The value to validate. validationContext ValidationContext The context information about the validation operation. Returns ValidationResult An instance of the ValidationResult class. Exceptions InvalidOperationException The current attribute is malformed. NotImplementedException IsValid(object, ValidationContext) has not been implemented by a derived class."
  },
  "api/AdaSoftLibrary.Web.Common.html": {
    "href": "api/AdaSoftLibrary.Web.Common.html",
    "title": "Namespace AdaSoftLibrary.Web.Common | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Common Classes DateCurrentOrInPastAttribute Validačný atribút kontroľuje, či je zadaná hodnota aktuálny dátum alebo v minulosti. RequiredIfCustom Validačný atribút kontroľuje, či je splnená podmienke pre požadovanú hodnotu"
  },
  "api/AdaSoftLibrary.Web.Controllers.AccessController.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.AccessController.html",
    "title": "Class AccessController | AdaSoftLibrary",
    "keywords": "Class AccessController Namespace AdaSoftLibrary.Web.Controllers Assembly AdaSoftLibrary.Web.dll public class AccessController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AccessController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AccessController(IUserAuthenticationService, ILogger<HomeController>, INotyfService) public AccessController(IUserAuthenticationService userAuthenticationService, ILogger<HomeController> logger, INotyfService notyf) Parameters userAuthenticationService IUserAuthenticationService logger ILogger<HomeController> notyf INotyfService Fields ACTION_LOGIN public const string ACTION_LOGIN = \"Login\" Field Value string ACTION_LOGOUT public const string ACTION_LOGOUT = \"Logout\" Field Value string NAME public const string NAME = \"Access\" Field Value string Methods Login() public IActionResult Login() Returns IActionResult Login(UserViewModel) [HttpPost] public Task<IActionResult> Login(UserViewModel model) Parameters model UserViewModel Returns Task<IActionResult> Logout() public Task<IActionResult> Logout() Returns Task<IActionResult>"
  },
  "api/AdaSoftLibrary.Web.Controllers.AuthorController.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.AuthorController.html",
    "title": "Class AuthorController | AdaSoftLibrary",
    "keywords": "Class AuthorController Namespace AdaSoftLibrary.Web.Controllers Assembly AdaSoftLibrary.Web.dll public class AuthorController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller AuthorController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AuthorController(ILogger<HomeController>, IMediator) public AuthorController(ILogger<HomeController> logger, IMediator mediator) Parameters logger ILogger<HomeController> mediator IMediator Fields ACTION_INDEX public const string ACTION_INDEX = \"Index\" Field Value string NAME public const string NAME = \"Author\" Field Value string Methods Index(AuthorsViewModel) public Task<IActionResult> Index(AuthorsViewModel model) Parameters model AuthorsViewModel Returns Task<IActionResult>"
  },
  "api/AdaSoftLibrary.Web.Controllers.BookController.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.BookController.html",
    "title": "Class BookController | AdaSoftLibrary",
    "keywords": "Class BookController Namespace AdaSoftLibrary.Web.Controllers Assembly AdaSoftLibrary.Web.dll public class BookController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller BookController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookController(ILogger<HomeController>, IMediator, INotyfService) public BookController(ILogger<HomeController> logger, IMediator mediator, INotyfService notyf) Parameters logger ILogger<HomeController> mediator IMediator notyf INotyfService Fields ACTION_BORROW public const string ACTION_BORROW = \"Borrow\" Field Value string ACTION_CREATE public const string ACTION_CREATE = \"Create\" Field Value string ACTION_DELETE public const string ACTION_DELETE = \"Delete\" Field Value string ACTION_DETAIL public const string ACTION_DETAIL = \"Detail\" Field Value string ACTION_EDIT public const string ACTION_EDIT = \"Edit\" Field Value string ACTION_INDEX public const string ACTION_INDEX = \"Index\" Field Value string ACTION_RETURN public const string ACTION_RETURN = \"Return\" Field Value string NAME public const string NAME = \"Book\" Field Value string Methods Borrow(DetailViewModel) [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Borrow(DetailViewModel model) Parameters model DetailViewModel Returns Task<IActionResult> Create() [Authorize] public IActionResult Create() Returns IActionResult Create(CreateViewModel) [Authorize] [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Create(CreateViewModel model) Parameters model CreateViewModel Returns Task<IActionResult> Delete(DeleteViewModel) [Authorize] [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Delete(DeleteViewModel model) Parameters model DeleteViewModel Returns Task<IActionResult> Delete(int) [Authorize] public Task<IActionResult> Delete(int id) Parameters id int Returns Task<IActionResult> Detail(int) public Task<IActionResult> Detail(int id) Parameters id int Returns Task<IActionResult> Edit(EditViewModel) [Authorize] [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Edit(EditViewModel model) Parameters model EditViewModel Returns Task<IActionResult> Edit(int) [Authorize] public Task<IActionResult> Edit(int id) Parameters id int Returns Task<IActionResult> Index(SearchViewModel) public Task<IActionResult> Index(SearchViewModel search) Parameters search SearchViewModel Returns Task<IActionResult> Return(DetailViewModel) [Authorize] [HttpPost] [ValidateAntiForgeryToken] public Task<IActionResult> Return(DetailViewModel model) Parameters model DetailViewModel Returns Task<IActionResult>"
  },
  "api/AdaSoftLibrary.Web.Controllers.HomeController.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.HomeController.html",
    "title": "Class HomeController | AdaSoftLibrary",
    "keywords": "Class HomeController Namespace AdaSoftLibrary.Web.Controllers Assembly AdaSoftLibrary.Web.dll public class HomeController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller HomeController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors HomeController(ILogger<HomeController>) public HomeController(ILogger<HomeController> logger) Parameters logger ILogger<HomeController> Fields ACTION_CONTACT public const string ACTION_CONTACT = \"Contact\" Field Value string ACTION_HELP public const string ACTION_HELP = \"Help\" Field Value string ACTION_INDEX public const string ACTION_INDEX = \"Index\" Field Value string ACTION_PRIVACY public const string ACTION_PRIVACY = \"Privacy\" Field Value string NAME public const string NAME = \"Home\" Field Value string Methods Contact() public IActionResult Contact() Returns IActionResult Error() [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)] public IActionResult Error() Returns IActionResult Help() public IActionResult Help() Returns IActionResult Index() public IActionResult Index() Returns IActionResult Privacy() public IActionResult Privacy() Returns IActionResult"
  },
  "api/AdaSoftLibrary.Web.Controllers.ReaderController.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.ReaderController.html",
    "title": "Class ReaderController | AdaSoftLibrary",
    "keywords": "Class ReaderController Namespace AdaSoftLibrary.Web.Controllers Assembly AdaSoftLibrary.Web.dll public class ReaderController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ReaderController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReaderController(ILogger<HomeController>) public ReaderController(ILogger<HomeController> logger) Parameters logger ILogger<HomeController> Fields ACTION_INDEX public const string ACTION_INDEX = \"Index\" Field Value string NAME public const string NAME = \"Author\" Field Value string Methods Index() public IActionResult Index() Returns IActionResult"
  },
  "api/AdaSoftLibrary.Web.Controllers.html": {
    "href": "api/AdaSoftLibrary.Web.Controllers.html",
    "title": "Namespace AdaSoftLibrary.Web.Controllers | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Controllers Classes AccessController AuthorController BookController HomeController ReaderController"
  },
  "api/AdaSoftLibrary.Web.Filters.GlobalExceptionFilters.html": {
    "href": "api/AdaSoftLibrary.Web.Filters.GlobalExceptionFilters.html",
    "title": "Class GlobalExceptionFilters | AdaSoftLibrary",
    "keywords": "Class GlobalExceptionFilters Namespace AdaSoftLibrary.Web.Filters Assembly AdaSoftLibrary.Web.dll public class GlobalExceptionFilters : IExceptionFilter, IFilterMetadata Inheritance object GlobalExceptionFilters Implements IExceptionFilter IFilterMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GlobalExceptionFilters(ILogger<GlobalExceptionFilters>) public GlobalExceptionFilters(ILogger<GlobalExceptionFilters> logger) Parameters logger ILogger<GlobalExceptionFilters> Methods OnException(ExceptionContext) Called after an action has thrown an Exception. public void OnException(ExceptionContext context) Parameters context ExceptionContext The ExceptionContext."
  },
  "api/AdaSoftLibrary.Web.Filters.html": {
    "href": "api/AdaSoftLibrary.Web.Filters.html",
    "title": "Namespace AdaSoftLibrary.Web.Filters | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Filters Classes GlobalExceptionFilters"
  },
  "api/AdaSoftLibrary.Web.Helpers.LabelRequiredTagHelper.html": {
    "href": "api/AdaSoftLibrary.Web.Helpers.LabelRequiredTagHelper.html",
    "title": "Class LabelRequiredTagHelper | AdaSoftLibrary",
    "keywords": "Class LabelRequiredTagHelper Namespace AdaSoftLibrary.Web.Helpers Assembly AdaSoftLibrary.Web.dll Tag helper zmení Label pre povinné položky na tučné písmo a pridá znak \"*\" [HtmlTargetElement(\"label\", Attributes = \"asp-for\")] public class LabelRequiredTagHelper : LabelTagHelper, ITagHelper, ITagHelperComponent Inheritance object TagHelper LabelTagHelper LabelRequiredTagHelper Implements ITagHelper ITagHelperComponent Inherited Members LabelTagHelper.Order LabelTagHelper.ViewContext LabelTagHelper.Generator LabelTagHelper.For TagHelper.Init(TagHelperContext) TagHelper.Process(TagHelperContext, TagHelperOutput) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LabelRequiredTagHelper(IHtmlGenerator) public LabelRequiredTagHelper(IHtmlGenerator generator) Parameters generator IHtmlGenerator Methods ProcessAsync(TagHelperContext, TagHelperOutput) Asynchronously executes the TagHelper with the given context and output. public override Task ProcessAsync(TagHelperContext context, TagHelperOutput output) Parameters context TagHelperContext Contains information associated with the current HTML tag. output TagHelperOutput A stateful HTML element used to generate an HTML tag. Returns Task A Task that on completion updates the output. Remarks By default this calls into Process(TagHelperContext, TagHelperOutput)."
  },
  "api/AdaSoftLibrary.Web.Helpers.html": {
    "href": "api/AdaSoftLibrary.Web.Helpers.html",
    "title": "Namespace AdaSoftLibrary.Web.Helpers | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Helpers Classes LabelRequiredTagHelper Tag helper zmení Label pre povinné položky na tučné písmo a pridá znak \"*\""
  },
  "api/AdaSoftLibrary.Web.Mapping.BookMappingProfile.html": {
    "href": "api/AdaSoftLibrary.Web.Mapping.BookMappingProfile.html",
    "title": "Class BookMappingProfile | AdaSoftLibrary",
    "keywords": "Class BookMappingProfile Namespace AdaSoftLibrary.Web.Mapping Assembly AdaSoftLibrary.Web.dll public class BookMappingProfile : Profile, IProfileExpression, IProfileConfiguration Inheritance object Profile BookMappingProfile Implements IProfileExpression IProfileConfiguration Inherited Members Profile.DisableConstructorMapping() Profile.CreateProjection<TSource, TDestination>() Profile.CreateProjection<TSource, TDestination>(MemberList) Profile.CreateMap<TSource, TDestination>() Profile.CreateMap<TSource, TDestination>(MemberList) Profile.CreateMap(Type, Type) Profile.CreateMap(Type, Type, MemberList) Profile.ClearPrefixes() Profile.ReplaceMemberName(string, string) Profile.RecognizePrefixes(params string[]) Profile.RecognizePostfixes(params string[]) Profile.RecognizeDestinationPrefixes(params string[]) Profile.RecognizeDestinationPostfixes(params string[]) Profile.AddGlobalIgnore(string) Profile.IncludeSourceExtensionMethods(Type) Profile.ProfileName Profile.AllowNullDestinationValues Profile.AllowNullCollections Profile.ShouldMapProperty Profile.ShouldMapField Profile.ShouldMapMethod Profile.ShouldUseConstructor Profile.SourceMemberNamingConvention Profile.DestinationMemberNamingConvention Profile.ValueTransformers object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors BookMappingProfile() public BookMappingProfile()"
  },
  "api/AdaSoftLibrary.Web.Mapping.html": {
    "href": "api/AdaSoftLibrary.Web.Mapping.html",
    "title": "Namespace AdaSoftLibrary.Web.Mapping | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Mapping Classes BookMappingProfile"
  },
  "api/AdaSoftLibrary.Web.Models.AuthorsViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.AuthorsViewModel.html",
    "title": "Class AuthorsViewModel | AdaSoftLibrary",
    "keywords": "Class AuthorsViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll public class AuthorsViewModel Inheritance object AuthorsViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Authors Zoznam autorov public IReadOnlyCollection<string> Authors { get; set; } Property Value IReadOnlyCollection<string> AuthorsCount Počet autorov [Display(Name = \"Počet autorov\")] public int AuthorsCount { get; } Property Value int SearchAuthor Vyhľadať autora [Display(Name = \"Vyhľadať autora\")] public string? SearchAuthor { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Web.Models.BookViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.BookViewModel.html",
    "title": "Class BookViewModel | AdaSoftLibrary",
    "keywords": "Class BookViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Údaje o knihe public class BookViewModel Inheritance object BookViewModel Derived CreateViewModel DetailViewModel EditViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Autor [Display(Name = \"Autor\")] [Required(ErrorMessage = \"Autor je povinný\")] [StringLength(15, ErrorMessage = \"Autor nesmie presiahnuť 15 znakov\")] public string Author { get; set; } Property Value string Description Popis [Display(Name = \"Popis\")] public string? Description { get; set; } Property Value string Name Názov [Display(Name = \"Názov\")] [Required(ErrorMessage = \"Názov je povinný\")] [StringLength(15, ErrorMessage = \"Názov nesmie presiahnuť 15 znakov\")] public string Name { get; set; } Property Value string Year Rok [Display(Name = \"Rok\")] [Range(0, 9999, ErrorMessage = \"Rok musí byť v rozsahu 0 až 9999\")] public int? Year { get; set; } Property Value int?"
  },
  "api/AdaSoftLibrary.Web.Models.BooksViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.BooksViewModel.html",
    "title": "Class BooksViewModel | AdaSoftLibrary",
    "keywords": "Class BooksViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll public class BooksViewModel Inheritance object BooksViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Books Zoznam kníh public IReadOnlyCollection<GetBookResponse> Books { get; set; } Property Value IReadOnlyCollection<GetBookResponse> BooksCount Počet kníh [Display(Name = \"Počet kníh\")] public int BooksCount { get; } Property Value int IsAuthenticated Je prihlásený? public bool IsAuthenticated { get; set; } Property Value bool Search Podmienky vyhľadávania public SearchViewModel Search { get; set; } Property Value SearchViewModel"
  },
  "api/AdaSoftLibrary.Web.Models.CreateViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.CreateViewModel.html",
    "title": "Class CreateViewModel | AdaSoftLibrary",
    "keywords": "Class CreateViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Zaevidovanie knihy public class CreateViewModel : BookViewModel Inheritance object BookViewModel CreateViewModel Inherited Members BookViewModel.Author BookViewModel.Name BookViewModel.Year BookViewModel.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/AdaSoftLibrary.Web.Models.DeleteViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.DeleteViewModel.html",
    "title": "Class DeleteViewModel | AdaSoftLibrary",
    "keywords": "Class DeleteViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Vymazanie knihy public class DeleteViewModel Inheritance object DeleteViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Author Autor [Display(Name = \"Autor\")] public string Author { get; set; } Property Value string Id ID [Required] public int Id { get; set; } Property Value int Name Názov [Display(Name = \"Názov\")] public string Name { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Web.Models.DetailViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.DetailViewModel.html",
    "title": "Class DetailViewModel | AdaSoftLibrary",
    "keywords": "Class DetailViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Detail knihy public class DetailViewModel : BookViewModel Inheritance object BookViewModel DetailViewModel Inherited Members BookViewModel.Author BookViewModel.Name BookViewModel.Year BookViewModel.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName Meno [Display(Name = \"Meno\")] [Required(ErrorMessage = \"Meno je povinné\")] [StringLength(100, MinimumLength = 3, ErrorMessage = \"Meno musí byť v rozsahu 3 až 100 znakov\")] public string? FirstName { get; set; } Property Value string FromDate Dátum požičania [Display(Name = \"Dátum požičania\")] [DataType(DataType.Date)] public DateOnly? FromDate { get; set; } Property Value DateOnly? ID public int ID { get; set; } Property Value int IsAuthenticated Je prihlásený ? public bool IsAuthenticated { get; init; } Property Value bool IsBorrowed Dostupnosť public bool IsBorrowed { get; init; } Property Value bool LastName Priezvisko [Display(Name = \"Priezvisko\")] [Required(ErrorMessage = \"Priezvisko je povinné\")] [StringLength(100, MinimumLength = 3, ErrorMessage = \"Priezvisko musí byť v rozsahu 3 až 100 znakov\")] public string? LastName { get; set; } Property Value string Reader Meno čitateľa [Display(Name = \"Meno čitateľa\")] public string Reader { get; } Property Value string"
  },
  "api/AdaSoftLibrary.Web.Models.EditViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.EditViewModel.html",
    "title": "Class EditViewModel | AdaSoftLibrary",
    "keywords": "Class EditViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Editácia knihy public class EditViewModel : BookViewModel Inheritance object BookViewModel EditViewModel Inherited Members BookViewModel.Author BookViewModel.Name BookViewModel.Year BookViewModel.Description object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FirstName Meno [Display(Name = \"Meno\")] [RequiredIf(\"IsBorrowed\", ErrorMessage = \"Meno je povinné\")] [StringLength(100, MinimumLength = 3, ErrorMessage = \"Meno musí byť v rozsahu 3 až 100 znakov\")] public string? FirstName { get; set; } Property Value string FromDate Dátum požičania [Display(Name = \"Dátum požičania\")] [RequiredIf(\"IsBorrowed\", ErrorMessage = \"Dátum požičania je povinný\")] [DataType(DataType.Date)] public DateOnly? FromDate { get; set; } Property Value DateOnly? Id ID [Required] public int Id { get; set; } Property Value int IsBorrowed Je požičaná? [Display(Name = \"Požičaná\")] public bool IsBorrowed { get; set; } Property Value bool LastName Priezvisko [Display(Name = \"Priezvisko\")] [RequiredIf(\"IsBorrowed\", ErrorMessage = \"Priezvisko je povinné\")] [StringLength(100, MinimumLength = 3, ErrorMessage = \"Priezvisko musí byť v rozsahu 3 až 100 znakov\")] public string? LastName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Web.Models.ErrorViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.ErrorViewModel.html",
    "title": "Class ErrorViewModel | AdaSoftLibrary",
    "keywords": "Class ErrorViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll public class ErrorViewModel Inheritance object ErrorViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties RequestId public string? RequestId { get; set; } Property Value string ShowRequestId public bool ShowRequestId { get; } Property Value bool"
  },
  "api/AdaSoftLibrary.Web.Models.SearchViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.SearchViewModel.html",
    "title": "Class SearchViewModel | AdaSoftLibrary",
    "keywords": "Class SearchViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Vyhľadať autora alebo názov knihy public class SearchViewModel Inheritance object SearchViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties Author Autor [Display(Name = \"Autor\")] public string? Author { get; set; } Property Value string BookFilter Filter zoznamu kníh BookFilterEnum [Display(Name = \"Filter\")] public BookFilterEnum BookFilter { get; set; } Property Value BookFilterEnum Name Názov [Display(Name = \"Názov\")] public string? Name { get; set; } Property Value string OnlyAvailable Len dostupné knihy [Display(Name = \"Len dostupné knihy\")] public bool OnlyAvailable { get; set; } Property Value bool SearchTerm Vyhľadať [Display(Name = \"Vyhľadané\")] public string? SearchTerm { get; set; } Property Value string Methods ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/AdaSoftLibrary.Web.Models.UserViewModel.html": {
    "href": "api/AdaSoftLibrary.Web.Models.UserViewModel.html",
    "title": "Class UserViewModel | AdaSoftLibrary",
    "keywords": "Class UserViewModel Namespace AdaSoftLibrary.Web.Models Assembly AdaSoftLibrary.Web.dll Prihlásenie používateľa (administrátora systému) public class UserViewModel Inheritance object UserViewModel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Password Heslo [Display(Name = \"Heslo\")] [Required(ErrorMessage = \"Heslo je povinné\")] [DataType(DataType.Password)] public string Password { get; set; } Property Value string RememberMe Zapamätať si? [Display(Name = \"Zapamätať si?\")] public bool RememberMe { get; set; } Property Value bool UserName Použivateľské meno [Display(Name = \"Použivateľské meno\")] [Required(ErrorMessage = \"Použivateľské meno je povinné\")] public string UserName { get; set; } Property Value string"
  },
  "api/AdaSoftLibrary.Web.Models.html": {
    "href": "api/AdaSoftLibrary.Web.Models.html",
    "title": "Namespace AdaSoftLibrary.Web.Models | AdaSoftLibrary",
    "keywords": "Namespace AdaSoftLibrary.Web.Models Classes AuthorsViewModel BookViewModel Údaje o knihe BooksViewModel CreateViewModel Zaevidovanie knihy DeleteViewModel Vymazanie knihy DetailViewModel Detail knihy EditViewModel Editácia knihy ErrorViewModel SearchViewModel Vyhľadať autora alebo názov knihy UserViewModel Prihlásenie používateľa (administrátora systému)"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | AdaSoftLibrary",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Introduction | AdaSoftLibrary",
    "keywords": "Introduction"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | AdaSoftLibrary",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}